<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Customer Order Page</title>
    <link rel="stylesheet" href="/css/customer_style.css">
</head>
<body>
    <div class="banner">
        <h1>Customer Order Page</h1>
        <button class="home-button" onclick="goToLogin()">Home</button>
    </div>
    <div class="main-wrapper">
        <div class="content">
            <div class="grid-container">
                <% teas.forEach(tea => { %>
                    <div class="container">
                        <div class="img-box">img</div>
                        <div class="details">
                            <p><strong><%= tea.name %></strong></p>
                            <% let tea_price = parseFloat(tea.price).toFixed(2); %>
                            <p>Cost: $<%= tea_price %></p>
                            <div class="customize-button" onclick="customizeItem('<%= tea.name %>', null, <%= tea.price %>)">Customize</div>
                            <div class="add-to-cart-button" onclick="addToCart('<%= tea.name %>', <%= tea.price %>)">Add to Cart</div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>

        <div class="checkout-box">
            <h2>Checkout</h2>
            <div id="checkout-items"></div>
            <div class="pay-section">
                <div style="margin-top: 1rem; margin-bottom: 1rem;">
                    <label for="tipAmount">Tip Amount ($):</label>
                    <input
                      type="number"
                      id="tipAmount"
                      name="tipAmount"
                      min="0"
                      step="0.01"
                      style="width: 80px; margin-left: 0.5rem;"
                      oninput="updateTotalWithTip()"
                    />
                </div>
                <input type="hidden" id="original-total" value="0.00">
                <span>Total: $<span id="total-price">0.00</span></span>
                <button class="pay-button">Pay</button>
            </div>
        </div>
    </div>

    <!-- Dim background overlay -->
    <div id="dim-background" class="dim hidden"></div>

    <!-- Customize Popup -->
    <div id="customize-popup" class="popup hidden">
        <h2>Customize Your Tea</h2>

        <!-- Flavor Dropdown -->
        <div class="dropdown">
            <button onclick="toggleDropdown()">Choose a flavor ↓</button>
            <div id="flavor-options" class="dropdown-content hidden">
                <% flavors.forEach(flavor => { %>
                    <div onclick="selectFlavor('<%= flavor.name %>')"><%= flavor.name %></div>
                <% }) %>
            </div>
            <div>Selected Flavor: <span id="selected-flavor">Default</span></div>
        </div>

        <!-- Sugar Slider -->
        <div class="slider-section">
            <label for="sugar-slider">Sugar Level:</label>
            <input type="range" id="sugar-slider" min="0" max="4" value="4">
            <div id="sugar-label">100%</div>
        </div>

        <!-- Ice Slider -->
        <div class="slider-section">
            <label for="ice-slider">Ice Level:</label>
            <input type="range" id="ice-slider" min="0" max="3" value="2">
            <div id="ice-label">Regular</div>
        </div>

        <!-- Addons -->
        <div class="addon-section">
            <h4>Addons</h4>
            <% addons.forEach(addon => { %>
                <label>
                    <input type="checkbox" value="<%= addon.name %>" data-price="<%= addon.price %>" class="addon-checkbox">
                    <!-- <input type="checkbox" value="<%= addon.name %>" class="addon-checkbox"> -->
                    <span><%= addon.name %> ($<%= addon.price %>)</span>
                </label>
            <% }); %>
        </div>

        <div style="margin-top: 10px;">
            <button onclick="closePopup()">Close</button>
            <button class="confirm-button" onclick="confirmCustomization()">Confirm</button>
        </div>

    </div>

    <!-- Thank You Popup -->
    <div id="thankyou-popup" class="popup thank-you-popup hidden">
        <h2><strong>Thank You!</strong></h2>
        <p>Your order will be with you shortly.</p>
        <button onclick="goToLogin()">Back to Home</button>
    </div>


    <script>
        let checkoutItems = [];
        let currentItemIndex = null;  // Keeps track of the item being edited, if any
        let currentItemName = null;  // Keeps track of the name of the item being customized
        let currentItemPrice = null; // Keeps track of the price of the item being customized

        function addToCart(name, price) {
            const item = { 
                name, 
                price: parseFloat(price), 
                quantity: 1,
                addon_price: 0.00, // ← Ensure this is set
                modifications: {
                    flavor: 'Default',
                    sugar: 4,
                    ice: 2,
                    addons: []
                }
            };
            checkoutItems.push(item);
            updateCheckout();
        }

        function removeItem(index) {
            checkoutItems.splice(index, 1);
            updateCheckout();
        }

        function updateCheckout() {
            const container = document.getElementById('checkout-items');
            const totalPrice = document.getElementById('total-price');
            container.innerHTML = '';  // Clear current items in the checkout

            let total = 0;

            checkoutItems.forEach((item, index) => {
                const addonsPrice = 0.75 * item.modifications.addons.length;
                const itemPrice = parseFloat(item.price) + addonsPrice;  // Add addon price here
                const quantity = item.quantity || 1;  // Default to 1 if no quantity is set
                const itemTotal = itemPrice * quantity;  // Calculate the total price for this item based on quantity
                total += itemTotal;

                const div = document.createElement('div');
                div.className = 'checkout-item';
                div.innerHTML = `
                    <div class="checkout-item-header">
                        <strong>${item.name}</strong>
                        <span>$${itemPrice.toFixed(2)} each</span>
                    </div>
                    <ul>
                        <li>Flavor: ${item.modifications.flavor}</li>
                        <li>Sugar: ${['0%', '30%', '50%', '80%', '100%'][item.modifications.sugar]}</li>
                        <li>Ice: ${['No Ice', 'Light', 'Regular', 'Extra'][item.modifications.ice]}</li>
                        ${item.modifications.addons.map(addon => `<li>Addon: ${addon}</li>`).join('')}
                    </ul>
                    <div class="checkout-item-actions">
                        <label for="quantity-${index}">Quantity:</label>
                        <input type="number" id="quantity-${index}" value="${quantity}" min="1" onchange="updateQuantity(${index}, this.value)" style="width: 50px;">
                        <span>Total: $${itemTotal.toFixed(2)}</span>
                        <button class="edit-button" onclick="customizeItem('${item.name}', ${index}, ${item.price})">Edit</button>
                        <button class="delete-button" onclick="removeItem(${index})">Delete</button>
                    </div>
                `;
                container.appendChild(div);
            });

            // Set the original total (excluding tip)
            document.getElementById('original-total').value = total.toFixed(2);

            // Update the total price without tip, which will later be updated with the tip
            totalPrice.textContent = total.toFixed(2);

            // Call updateTotalWithTip to recalculate the total with the tip
            updateTotalWithTip();
        }


        function customizeItem(name, index = null, price = null) {
            currentItemName = name;  // Store the name of the item being customized
            currentItemIndex = index;  // If editing, store the index
            currentItemPrice = price;  // Store the price of the item being customized

            document.getElementById('customize-popup').classList.remove('hidden');
            document.getElementById('dim-background').classList.remove('hidden');
            document.getElementById('selected-flavor').innerText = 'Default';
            document.getElementById('sugar-slider').value = 4;
            document.getElementById('sugar-label').innerText = '100%';
            document.getElementById('ice-slider').value = 2;
            document.getElementById('ice-label').innerText = 'Regular';
            // Reset addon checkboxes
            const checkboxes = document.querySelectorAll('.addon-section input[type="checkbox"]');
            checkboxes.forEach(checkbox => checkbox.checked = false);

            if (index !== null) {
                const item = checkoutItems[index];
                // Pre-select the current customizations for editing
                document.getElementById('selected-flavor').innerText = item.modifications.flavor || 'Default';
                document.getElementById('sugar-slider').value = item.modifications.sugar || 4;
                document.getElementById('ice-slider').value = item.modifications.ice || 2;
                
                // Pre-select addons
                item.modifications.addons.forEach(addon => {
                    const checkbox = document.querySelector(`input[value="${addon}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
        }

        function closePopup() {
            document.getElementById('customize-popup').classList.add('hidden');
            document.getElementById('dim-background').classList.add('hidden');
        }

        function toggleDropdown() {
            const dropdown = document.getElementById('flavor-options');
            dropdown.classList.toggle('hidden');
        }

        function selectFlavor(name) {
            document.getElementById('selected-flavor').innerText = name;
            toggleDropdown();
        }

        document.getElementById('sugar-slider').addEventListener('input', function () {
            const sugarMap = ['0%', '30%', '50%', '80%', '100%'];
            document.getElementById('sugar-label').innerText = sugarMap[this.value];
        });

        document.getElementById('ice-slider').addEventListener('input', function () {
            const iceMap = ['No Ice', 'Light', 'Regular', 'Extra'];
            document.getElementById('ice-label').innerText = iceMap[this.value];
        });

        function confirmCustomization() {
            const flavor = document.getElementById('selected-flavor').innerText;
            const sugar = document.getElementById('sugar-slider').value;
            const ice = document.getElementById('ice-slider').value;

            const addons = [];
            let addon_price = 0;

            // Get all selected addon checkboxes and accumulate their prices
            const addonCheckboxes = document.querySelectorAll('.addon-section input[type="checkbox"]:checked');
            addonCheckboxes.forEach(checkbox => {
                addons.push(checkbox.value);
                const price = parseFloat(checkbox.getAttribute('data-price')) || 0;
                addon_price += price; // Sum up the addon prices
            });

            // Create the item object
            const item = {
                name: currentItemName,
                price: parseFloat(currentItemPrice), // Base tea price
                quantity: 1,
                modifications: { flavor, sugar, ice, addons },
                addon_price: parseFloat(addon_price) // Total addon price
            };

            if (currentItemIndex === null) {
                checkoutItems.push(item); // New item added
            } else {
                checkoutItems[currentItemIndex] = item; // Update existing item
            }

            updateCheckout();
            closePopup();
        }

        function recalculateItemPrice(item) {
            let addonsPrice = 0;
            item.modifications.addons.forEach(addon => {
                const addonElement = document.querySelector(`input[value="${addon}"]`);
                if(addonElement) {
                    const price = parseFloat(addonElement.nextElementSibling.textContent.split('$')[1]);
                    addonsPrice += price;
                }
            });

            return parseFloat(item.price) + addonsPrice;
        }

        // Redirect to login/home page
        function goToLogin() {
            window.location.href = '/';
        }

        // Pay button action
        document.querySelector('.pay-button').addEventListener('click', function () {
            const tip = parseFloat(document.getElementById('tipAmount').value) || 0;

            const orderData = {
                tip,
                orders: checkoutItems.map(item => {
                    const quantity = item.quantity || 1;

                    const menu_item_price = parseFloat(item.price); // base price per item
                    let addon_price = 0; // Initialize addon_price to 0

                    // Calculate total addon price based on selected addons
                    item.modifications.addons.forEach(addon => {
                        const addonElement = document.querySelector(`input[value="${addon}"]`);
                        if (addonElement) {
                            const price = parseFloat(addonElement.getAttribute('data-price')) || 0;
                            addon_price += price; // Accumulate the addon price
                        }
                    });

                    // Calculate the total cost for this item (base price + addon price)
                    const singleItemTotal = menu_item_price + addon_price;
                    const totalCost = singleItemTotal * quantity;

                    // Ensure that values are sent as numbers with two decimal precision
                    return {
                        tea_type: item.name,
                        flavor: item.modifications.flavor || 'Default',
                        quantity,
                        cost: totalCost.toFixed(2), // Final cost with addons and quantity
                        menu_item_price: menu_item_price, // Base price
                        addon_price: addon_price // Addon price
                    };
                })
            };

            // Send the order data to the backend
            fetch('/customer/submit-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show dim background and thank you popup on success
                    document.getElementById('dim-background').classList.remove('hidden');
                    document.getElementById('thankyou-popup').classList.remove('hidden');
                } else {
                    alert('There was an error with your order.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('There was an error with your order.');
            });
        });


        function updateTotalWithTip() {
            const tipInput = document.getElementById('tipAmount');
            const tip = parseFloat(tipInput.value) || 0;

            // Get the current total of items in the cart (without tip)
            const originalTotal = parseFloat(document.getElementById('original-total').value);

            // Calculate the new total (original total + tip)
            const newTotal = (originalTotal + tip).toFixed(2);

            // Update the total price displayed
            document.getElementById('total-price').textContent = newTotal;
        }

        function updateQuantity(index, newQuantity) {
            const quantity = parseInt(newQuantity, 10);
            if (quantity > 0) {
                checkoutItems[index].quantity = quantity;  // Update the quantity
                updateCheckout();  // Recalculate the total and refresh the checkout view
            }
        }
    </script>
</body>
</html>
