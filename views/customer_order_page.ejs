<!-- Basic HTML setup with linked CSS and title -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Customer Order Page</title>
    <!-- Link to external CSS file for styling -->
    <link rel="stylesheet" href="/css/customer_style.css">
</head>

<div id="google_translate_element" style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;"></div>

<script type="text/javascript">
    function googleTranslateElementInit() {
        new google.translate.TranslateElement({
            pageLanguage: 'en',
            includedLanguages: 'en,es,fr,de,zh-CN,hi,ja,ko,ru,ar', // Supported languages
            layout: google.translate.TranslateElement.InlineLayout.SIMPLE
        }, 'google_translate_element');
    }
</script>

<script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

<body>
    <!-- Page header with title and Home button -->
    <div class="banner">
        <h1>Menu</h1>
        <button class="home-button" onclick="goToLogin()">Home</button>

        <div id="weather-widget">
            Loading weather...
        </div>
        
        <script>
        async function fetchWeather() {
            try {
                const response = await fetch('/weather');
                const data = await response.json();
                console.log('Weather Data:', data);
        
                if (data.temperature !== undefined && data.weatherDescription !== undefined) {
                    document.getElementById('weather-widget').innerHTML = `
                        üå§Ô∏è ${data.weatherDescription}<br>
                        üå°Ô∏è ${data.temperature}¬∞C
                    `;
                } else {
                    document.getElementById('weather-widget').innerText = 'Weather info unavailable';
                }
            } catch (err) {
                console.error('Error fetching weather:', err);
                document.getElementById('weather-widget').innerText = 'Unable to load weather';
            }
        }
        
        fetchWeather();
        </script>
    </div>

    <div class="main-wrapper">
        <!-- Tea menu section -->
        <div class="content">
            <div class="grid-container">
                <% teas.forEach(tea => { %>
                    <div class="container">
                        <div class="img-box">
                            <% if (tea.name == 'Brewed Tea') { %>
                                <img src="/tea_images/brewed_tea.png" alt="Brewed Tea">
                            <% } else if (tea.name == 'Fresh Milk') { %>
                                <img src="/tea_images/fresh_milk.png" alt="Fresh Milk">
                            <% } else if (tea.name == 'Fruit Tea') { %>
                                <img src="/tea_images/fruit_tea.png" alt="Fruit Tea">
                            <% } else if (tea.name == 'Ice Blended Tea') { %>
                                <img src="/tea_images/ice_blended_tea.png" alt="Ice Blended Tea">
                            <% } else if (tea.name == 'Milk Tea') { %>
                                <img src="/tea_images/milk_tea.png" alt="Milk Tea">
                            <% } else if (tea.name == 'Tea Mojito') { %>
                                <img src="/tea_images/tea_mojito.png" alt="Tea Mojito">
                            <% } %>
                        </div>
                        <div class="details">
                            <p><strong><%= tea.name %></strong></p> <!-- Tea name -->
                            <% let tea_price = parseFloat(tea.price).toFixed(2); %>
                            <p>Cost: $<%= tea_price %></p>
                            <div class="contains-section">
                                <span>Contains:</span>
                                <div class="allergen-circles">
                                    <% if (tea.name == 'Brewed Tea' || tea.name == 'Tea Mojito') { %>
                                        <div class="circle">
                                            <img src="/allergens/allergen_free.png" alt="Allergen Free">
                                        </div>
                                    <% } else if (tea.name == 'Fresh Milk' || tea.name == 'Milk Tea') { %>
                                        <div class="circle">
                                            <img src="/allergens/milk.png" alt="Milk">
                                        </div>
                                    <% } else if (tea.name == 'Fruit Tea') { %>
                                        <div class="circle">
                                            <img src="/allergens/soya.png" alt="Soya">
                                        </div>
                                    <% } else if (tea.name == 'Ice Blended Tea') { %>
                                        <div class="circle">
                                            <img src="/allergens/milk.png" alt="Milk">
                                        </div>
                                        <div class="circle">
                                            <img src="/allergens/gluten.png" alt="Gluten">
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                            <div class="customize-button" onclick="customizeItem('<%= tea.name %>', null, <%= tea.price %>)">Customize</div>
                            <div class="add-to-cart-button" onclick="addToCart('<%= tea.name %>', <%= tea.price %>)">Add to Cart</div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>

        <!-- Checkout section -->
        <!-- Checkout section -->
        <div class="checkout-box">
            <h2>Checkout</h2>
            <!-- List of items in checkout -->
            <div id="checkout-items"></div>
            <div class="pay-section">
                <!-- Tip input and total cost display -->
                <div style="margin-top: 1rem; margin-bottom: 1rem;">
                    <label for="tipAmount">Tip Amount ($):</label>
                    <input
                      type="number"
                      id="tipAmount"
                      name="tipAmount"
                      min="0"
                      step="0.01"
                      style="width: 80px; margin-left: 0.5rem;"
                      oninput="updateTotalWithTip()"
                    />
                </div>
                <input type="hidden" id="original-total" value="0.00">
                <span>Total: $<span id="total-price">0.00</span></span>
                <button class="pay-button">Pay</button> <!-- Pay button -->
            </div>
        </div>
    </div>

    <!-- Background overlay for popup modals -->
    <div id="dim-background" class="dim hidden"></div>

    <!-- Tea customization popup -->
    <div id="customize-popup" class="popup hidden">
        <h2>Customize Your Tea</h2>

        <!-- Flavor selection dropdown -->
        <div class="dropdown">
            <button onclick="toggleDropdown()">Choose a flavor ‚Üì</button>
            <div id="flavor-options" class="dropdown-content hidden">
                <% flavors.forEach(flavor => { %>
                    <div onclick="selectFlavor('<%= flavor.name %>')"><%= flavor.name %></div>
                <% }) %>
            </div>
            <div>Selected Flavor: <span id="selected-flavor">Default</span></div>
        </div>

        <!-- Sugar level slider -->
        <div class="slider-section">
            <label for="sugar-slider">Sugar Level:</label>
            <input type="range" id="sugar-slider" min="0" max="4" value="4">
            <div id="sugar-label">100%</div>
        </div>

        <!-- Ice level slider -->
        <div class="slider-section">
            <label for="ice-slider">Ice Level:</label>
            <input type="range" id="ice-slider" min="0" max="3" value="2">
            <div id="ice-label">Regular</div>
        </div>

        <!-- Addon selection checkboxes -->
        <div class="addon-section">
            <h4>Addons</h4>
            <% addons.forEach(addon => { %>
                <label class="addon-label">
                    <input type="checkbox" value="<%= addon.name %>" data-price="<%= addon.price %>" class="addon-checkbox">
                    
                    <% if (addon.name === 'Pudding' || addon.name === 'Ice Cream' || addon.name === 'Creama') { %>
                        <div class="addon-allergen">
                            <div class="circle">
                                <img src="/allergens/milk.png" alt="Milk">
                            </div>
                        </div>
                    <% } else { %>
                        <!-- Empty div to keep spacing consistent even if no allergen -->
                        <div class="addon-allergen" style="width: 24px;"></div>
                    <% } %>
        
                    <span><%= addon.name %> ($<%= addon.price %>)</span>
                </label>
            <% }); %>
        </div>

        <!-- Close and Confirm customization buttons -->
        <div style="margin-top: 10px;">
            <button onclick="closePopup()">Close</button>
            <button class="confirm-button" onclick="confirmCustomization()">Confirm</button>
        </div>
    </div>

    <!-- Thank you popup after order submission -->
    <div id="thankyou-popup" class="popup thank-you-popup hidden">
        <h2><strong>Thank You!</strong></h2>
        <p>Your order will be with you shortly.</p>
        <button onclick="goToLogin()">Back to Home</button>
    </div>

    <!-- JavaScript logic -->
    <script>
        // Global state for checkout and current item being edited
        let checkoutItems = [];
        let currentItemIndex = null;
        let currentItemName = null;
        let currentItemPrice = null;

        // Add a tea item to cart
        // Add a tea item to cart
        function addToCart(name, price) {
            const item = {
                name,
                price: parseFloat(price),
                quantity: 1,
                addon_price: 0.00,
                modifications: {
                    flavor: 'Default',
                    sugar: 4,
                    ice: 2,
                    addons: []
                }
            };
            checkoutItems.push(item);
            updateCheckout(); // Refresh checkout display
        }

        // Remove item from checkout
        function removeItem(index) {
            checkoutItems.splice(index, 1);
            updateCheckout();
        }

        // Refresh checkout display and total price
        function updateCheckout() {
            const container = document.getElementById('checkout-items');
            const totalPrice = document.getElementById('total-price');
            container.innerHTML = ''; // Clear previous items

            let total = 0;

            // Loop through cart items and display each
            checkoutItems.forEach((item, index) => {
                const addonsPrice = 0.75 * item.modifications.addons.length;
                const itemPrice = parseFloat(item.price) + addonsPrice;
                const quantity = item.quantity || 1;
                const itemTotal = itemPrice * quantity;
                total += itemTotal;

                // Create checkout item HTML
                const div = document.createElement('div');
                div.className = 'checkout-item';
                div.innerHTML = `
                    <div class="checkout-item-header">
                        <strong>${item.name}</strong>
                        <span>$${itemPrice.toFixed(2)} each</span>
                    </div>
                    <ul>
                        <li>Flavor: ${item.modifications.flavor}</li>
                        <li>Sugar: ${['0%', '30%', '50%', '80%', '100%'][item.modifications.sugar]}</li>
                        <li>Ice: ${['No Ice', 'Light', 'Regular', 'Extra'][item.modifications.ice]}</li>
                        ${item.modifications.addons.map(addon => `<li>Addon: ${addon}</li>`).join('')}
                    </ul>
                    <div class="checkout-item-actions">
                        <label for="quantity-${index}">Quantity:</label>
                        <input type="number" id="quantity-${index}" value="${quantity}" min="1" onchange="updateQuantity(${index}, this.value)" style="width: 50px;">
                        <span>Total: $${itemTotal.toFixed(2)}</span>
                        <button class="edit-button" onclick="customizeItem('${item.name}', ${index}, ${item.price})">Edit</button>
                        <button class="delete-button" onclick="removeItem(${index})">Delete</button>
                    </div>
                `;
                container.appendChild(div);
            });

            document.getElementById('original-total').value = total.toFixed(2);
            totalPrice.textContent = total.toFixed(2);
            updateTotalWithTip();
        }

        // Show customization popup
        function customizeItem(name, index = null, price = null) {
            currentItemName = name;
            currentItemIndex = index;
            currentItemPrice = price;

            document.getElementById('customize-popup').classList.remove('hidden');
            document.getElementById('dim-background').classList.remove('hidden');

            // Reset customization options
            document.getElementById('selected-flavor').innerText = 'Default';
            document.getElementById('sugar-slider').value = 4;
            document.getElementById('sugar-label').innerText = '100%';
            document.getElementById('ice-slider').value = 2;
            document.getElementById('ice-label').innerText = 'Regular';
            document.querySelectorAll('.addon-section input[type="checkbox"]').forEach(cb => cb.checked = false);

            // Pre-fill options if editing an existing item
            if (index !== null) {
                const item = checkoutItems[index];
                document.getElementById('selected-flavor').innerText = item.modifications.flavor;
                document.getElementById('sugar-slider').value = item.modifications.sugar;
                document.getElementById('ice-slider').value = item.modifications.ice;
                item.modifications.addons.forEach(addon => {
                    const checkbox = document.querySelector(`input[value="${addon}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
        }

        // Close customization popup
        function closePopup() {
            document.getElementById('customize-popup').classList.add('hidden');
            document.getElementById('dim-background').classList.add('hidden');
        }

        // Flavor dropdown handlers
        function toggleDropdown() {
            document.getElementById('flavor-options').classList.toggle('hidden');
        }
        function selectFlavor(name) {
            document.getElementById('selected-flavor').innerText = name;
            toggleDropdown();
        }

        // Update slider labels
        document.getElementById('sugar-slider').addEventListener('input', function () {
            document.getElementById('sugar-label').innerText = ['0%', '30%', '50%', '80%', '100%'][this.value];
        });
        document.getElementById('ice-slider').addEventListener('input', function () {
            document.getElementById('ice-label').innerText = ['No Ice', 'Light', 'Regular', 'Extra'][this.value];
        });

        // Confirm customization and save it
        function confirmCustomization() {
            const flavor = document.getElementById('selected-flavor').innerText;
            const sugar = document.getElementById('sugar-slider').value;
            const ice = document.getElementById('ice-slider').value;
            const addons = [];
            let addon_price = 0;

            document.querySelectorAll('.addon-section input[type="checkbox"]:checked').forEach(cb => {
                addons.push(cb.value);
                addon_price += parseFloat(cb.getAttribute('data-price')) || 0;
            });

            const item = {
                name: currentItemName,
                price: parseFloat(currentItemPrice),
                quantity: 1,
                modifications: { flavor, sugar, ice, addons },
                addon_price
            };

            if (currentItemIndex === null) {
                checkoutItems.push(item);
            } else {
                checkoutItems[currentItemIndex] = item;
            }

            updateCheckout();
            closePopup();
        }

        // Redirect to home page
        function goToLogin() {
            window.location.href = '/';
        }

        // Submit order data to backend
        document.querySelector('.pay-button').addEventListener('click', function () {
            const tip = (parseFloat(document.getElementById('tipAmount').value) || 0).toFixed(2);
            const orderData = {
                tip,
                orders: checkoutItems.map(item => {
                    const quantity = item.quantity || 1;
                    let addon_price = 0;
                    item.modifications.addons.forEach(addon => {
                        const cb = document.querySelector(`input[value="${addon}"]`);
                        if (cb) addon_price += parseFloat(cb.getAttribute('data-price')) || 0;
                    });
                    const cost = (parseFloat(item.price) + addon_price) * quantity;
                    return {
                        tea_type: item.name,
                        flavor: item.modifications.flavor,
                        quantity,
                        cost: cost.toFixed(2),
                        menu_item_price: item.price,
                        addon_price
                    };
                })
            };

            fetch('/customer/submit-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderData)
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('dim-background').classList.remove('hidden');
                    document.getElementById('thankyou-popup').classList.remove('hidden');
                } else {
                    alert('There was an error with your order.');
                }
            })
            .catch(err => {
                console.error('Error:', err);
                alert('There was an error with your order.');
            });
        });

        // Recalculate total with tip
        function updateTotalWithTip() {
            const tip = parseFloat(document.getElementById('tipAmount').value) || 0;
            const originalTotal = parseFloat(document.getElementById('original-total').value);
            document.getElementById('total-price').textContent = (originalTotal + tip).toFixed(2);
        }

        // Update item quantity and refresh checkout
        function updateQuantity(index, newQuantity) {
            const quantity = parseInt(newQuantity, 10);
            if (quantity > 0) {
                checkoutItems[index].quantity = quantity;
                updateCheckout();
            }
        }
    </script>
</body>
</html>
